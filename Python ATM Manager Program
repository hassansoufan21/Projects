import random

class Account:
    def __init__(self, firstname, lastname, SSN):

        # Generate unique account number
        while True:
            test_number = BankUtility.generateRandomInteger(10000000,99999999)
            duplicate = False
            for acct in Bank.accounts:
                if test_number == acct.account_number:
                    duplicate = True
                    break
            if not duplicate:
                self.account_number = test_number
                break

        pin = BankUtility.generateRandomInteger(0, 9999)
        self.pin = f"{pin:0>4}" 
        self.balance = 0
        temp = str(SSN)
        self.socialsecurity = "999" + temp[3:]
        self.firstname = firstname
        self.lastname = lastname
    # add methods as getters and setters for attributes
       

    def deposit(self, amount):
        # implement deposit here
        if amount > 0:
            self.balance += amount
            print(f"Deposited ${amount}. New balance: ${self.balance}")
        else:
            print("Invalid deposit amount")
  
    def withdraw(self, amount):
        # implement withdraw here
        if amount > 0 and self.balance >= amount:
            self.balance -= amount
            print(f"Withdrew ${amount}. New balance: ${self.balance}")
        else:
            print("Insufficient funds or invalid withdrawal amount.")
        return 0 # be sure to change this
    
    
    def isValidPIN(self, pin):
        # implement isValidPIN here
        return self.pin == pin
        #return False  # be sure to change this
    
    def __str__(self):
        text = f"Account Number: {self.account_number}\n"
        text += f"First Name: {self.firstname}\n"
        text += f"Last Name: {self.lastname}\n"
        text += f"SSN: {self.socialsecurity}\n"
        text += f"PIN: {self.pin}\n"
        text += f"Balance: ${self.balance}"
        return text
    # all objects have a toString method - this indicates you are providing
    # your own version
    def __repr__(self):
        return f"Account Number: {self.account_number}, Balance: ${self.balance}" # change this as needed

class CoinCollector:

    def parseChange(coins_string):
        cents = 0
        for coin in coins:
            if coin == "P":
                cents += 1
            elif coin == "N":
                cents += 5
            elif coin == "D":
                cents += 10
            elif coin == "Q":
                cents += 25
            elif coin == "H":
                cents += 50
            elif coin == "W":
                cents += 100
            else:
                print(f"{coin} is an invalid coin.")
        return cents
        # implement parseChange here        
        return 0

class Bank:
    # Instructions say these are class/static vars
    ACCOUNTS_LIMIT = 100
    accounts = []
    
    def addAccountToBank(account):
        if len(Bank.accounts) >= Bank.ACCOUNTS_LIMIT:
            print("No more accounts available")
            return False
        
        Bank.accounts.append(account)
        # implement addAccountToBank here
        
        return True; # be sure to change this as needed

    def removeAccountFromBank(account):
        # implement removeAccountFromBank here
        for act2 in Bank.accounts:
            if account.account_number == act2.account_number:
                Bank.accounts.remove(account)
                break
        else:
            print("Account not found.")

    
    def findAccount(accountNumber):
        for account in Bank.accounts:
            if account.account_number == accountNumber:
                return account
        return None # be sure to change this as needed
    
class BankUtility:
    
    def __init(self, prompt):
        self.prompt = prompt
        
    def promptUserForString(prompt):
        # implement promptUserForString here
        while True:
            string = input(prompt)
            if string.strip():
                return string
            else:
                print("Please enter a non-empty string.")
        return "" # be sure to change this

    def promptUserForPositiveNumber(prompt):
        while True:
            try:
                number = float(input(prompt))
                if number > 0:
                    return number
                else:
                    print("Please enter a positive number.")
            except ValueError:
                print("Invalid input. Please enter a number.")
    
    def generateRandomInteger(min, max):
        # implement generateRandomInteger here
        generate_random_number = random.randint(1,100)
        return random.randint(min, max)
        return 0 # be sure to change as needed
    
    def convertFromDollarsToCents(amount):        
        # implement convertFromDollarsToCents here     
        
        return 0 # be sure to change as needed
    
    '''
      Checks if a given string is a number (long)
      This does NOT handle decimals.
      
      YOU DO NOT NEED TO CHANGE THIS METHOD
      THIS IS FREE FOR YOU TO USE AS NEEDED
      
      @param numberToCheck String to check
      @return true if the String is a number, false otherwise
     '''
    def isNumeric(numberToCheck):
        try:
            if numberToCheck.isdigit():
                return True
            else:
                return False
        except ValueError:
            return False

class BankManager:

    @staticmethod
    def main():
        
        #bank = Bank()
        while True:
            print("SOUFAN CREDIT UNION ATM Menu:")
            print("1. Create Account")
            print("2. Find Account")
            print("3. Change PIN")
            print("4. Deposit")
            print("5. Transfer")
            print("6. Withdraw")
            print("7. ATM Withdrawl")
            print("8. Deposit Change")
            print("9. Close Account")
            print("10. Close Program")

            choice = BankUtility.promptUserForPositiveNumber("Enter your choice: ")

            if choice == 1:
                # First Name
                firstname = BankUtility.promptUserForString("Enter your first name: ")
                # Last Name
                lastname = BankUtility.promptUserForString("Enter your last name: ")
                # SSN
                SSN = BankUtility.promptUserForString("Enter your SSN: ")
                # Create the account
                Bank.addAccountToBank(account)
                print(account)
                print("Account created successfully!")
            elif choice == 2:
                account_number = BankUtility.promptUserForPositiveNumber("Enter your account number: ")
                pin = BankUtility.promptUserForString("Enter your PIN: ")
                account = Bank.findAccount(account_number)
                if account and account.isValidPIN(pin):
                    print(account)
            elif choice == 3:
                account_number = BankUtility.promptUserForPositiveNumber("Enter your account number: ")
                pin = BankUtility.promptUserForString("Enter your PIN: ")
                account = Bank.findAccount(account_number)
                if account and account.isValidPIN(pin):
                    changePIN = BankUtility.promptUserForString("Enter new PIN: ")
                    changePIN2 = BankUtility.promptUserForString("Confirm new PIN: ")
                    if changePIN == changePIN2:
                        account.pin = changePIN
                        print("PIN Updated!")
                    else:
                        print("PINs do not match")
                else:
                    print("No matching account found.")
            elif choice == 4:
                account_number = BankUtility.promptUserForPositiveNumber("Enter your account number: ")
                pin = BankUtility.promptUserForString("Enter your PIN: ")
                account = Bank.findAccount(account_number)
                if account and account.isValidPIN(pin):
                    amount = BankUtility.promptUserForPositiveNumber("Enter the deposit amount (in dollars and cents): ")
                    account.deposit(amount)
                else:
                    print("No matching account found.")
            elif choice == 5:
                account_number = BankUtility.promptUserForPositiveNumber("Enter your account number: ")
                pin = BankUtility.promptUserForString("Enter your PIN: ")
                account = Bank.findAccount(account_number)
                if account and account.isValidPIN(pin):
                    recipient_account_number = BankUtility.promptUserForPositiveNumber("Enter the recipient's account number: ")
                    recipient_account = Bank.findAccount(recipient_account_number)
                if recipient_account and account.balance >= amount:
                    account.withdraw(amount)
                    recipient_account.deposit(amount)
                    print(f"Transferred ${amount} to account {recipient_account_number}.")
                else:
                    print("Invalid recipient account or insufficient funds.")
            elif choice == 6:
                account_number = BankUtility.promptUserForPositiveNumber("Enter your account number: ")
                pin = BankUtility.promptUserForString("Enter your PIN: ")
                account = Bank.findAccount(account_number)
                if account and account.isValidPIN(pin):
                    amount = BankUtility.promptUserForPositiveNumber("Enter the withdrawal amount (in dollars and cents): ")
                    if amount <= account.balance:
                        account.withdraw(amount)
                    else:
                        print("Insufficient funds or invalid withdrawal amount.")
                else:
                    print("No matching account found.")
            elif choice == 7:
                account_number = BankUtility.promptUserForPositiveNumber("Enter your account number: ")
                pin = BankUtility.promptUserForString("Enter your PIN: ")
                account = Bank.findAccount(account_number)
                if account and account.isValidPIN(pin):
                    amount = BankUtility.promptUserForPositiveNumber("Enter the withdrawal amount (in dollars, no cents. In Multiples of $5 (Limit $1000)): ")
                    if amount % 5 != 0 or amount > 1000:
                        print("Invalid withdrawal amount. Must be a multiple of $5 and not exceed $1000.")
                    else:
                        w_amount = amount
                        for bill in [20,10,5]:
                            bill_count = amount // bill
                            amount -= bill_count * bill
                            print(f"{int(bill_count)} {bill} dollar bills.")
                        account.withdraw(w_amount)
                else:
                    print("No matching account found.")
                print(f"Your current balance is: ${account.balance}")
            elif choice == 8:
                account_number = BankUtility.promptUserForPositiveNumber("Enter your account number: ")
                pin = BankUtility.promptUserForString("Enter your PIN: ")
                account = Bank.findAccount(account_number)
                if account and account.isValidPIN(pin):
                    amount = BankUtility.promptUserForString("Enter the deposit amount(in coins (example: Penny = P)): ")
                    cents = CoinCollector.parseChange(amount)
                    if cents > 0:
                        account.deposit(cents/100)
                    else:
                        print("Invalid amount or coin.")

            elif choice == 9:
                account_number = BankUtility.promptUserForPositiveNumber("Enter your account number: ")
                pin = BankUtility.promptUserForString("Enter your PIN: ")
                account = Bank.findAccount(account_number)
                if account and account.isValidPIN(pin):
                    Bank.removeAccountFromBank(account)
                    print("Account Closed.")
                else:
                    print(f"Account {account_number} not found.")

            elif choice == 10:
               break
            else:
                print("Invalid choice.")


if __name__ == "__main__":
    BankManager.main()
